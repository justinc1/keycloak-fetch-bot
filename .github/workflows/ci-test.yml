name: CI tests
on:
  - push
jobs:

  unit-tests:
    runs-on: ubuntu-22.04
    container: python:3.10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: pip install -r requirements-dev.txt
      # install dependencies mentioned in pyproject.toml
      - run: pip install .
      - run: pytest --vcr-record=none tests/unit
    env:
      KEYCLOAK_API_CA_BUNDLE:
      # pyvcr created cassette with this particular URL
      SSO_API_URL: https://172.17.0.2:8443/
      SSO_API_USERNAME: admin
      SSO_API_PASSWORD: admin

  integration-tests:
    runs-on: ubuntu-22.04
    container: python:3.10
    strategy:
      matrix:
        kc_version: [9.0.3, 15.0.2]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: pip install -r requirements-dev.txt
      # install dependencies mentioned in pyproject.toml
      - run: pip install .
      - run: |
          cat >env.env <<EOF
          KEYCLOAK_API_CA_BUNDLE=
          SSO_API_URL=https://keycloak:8443/
          SSO_API_USERNAME=admin
          SSO_API_PASSWORD=admin
          EOF
      - run: ./.github/inject_data.py
      - run: pytest tests/integration
      # run also unit tests, but ignore VCR files
      - run: pytest --disable-vcr tests/unit
    env:
      KEYCLOAK_API_CA_BUNDLE:
      SSO_API_URL: https://keycloak:8443/
      SSO_API_USERNAME: admin
      SSO_API_PASSWORD: admin
    services:
      keycloak:
        image: quay.io/keycloak/keycloak:${{ matrix.kc_version }}
        env:
          KEYCLOAK_USER: admin
          KEYCLOAK_PASSWORD: admin
        # options: -b 0.0.0.0

  # check the package is at least importable
  check-import:
    runs-on: ubuntu-22.04
    container: python:3.10
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # install dependencies mentioned in pyproject.toml
      - run: pip install .
      # from source directory
      - run: python -c 'import kcfetcher; from kcfetcher.store import Store; '
      # from arbitrary directory
      - run: cd /tmp; python -c 'import kcfetcher; from kcfetcher.store import Store; '

  # build whl and upload to pypi.org
  build_whl:
    if: github.ref_type == 'tag'
    needs:
      - unit-tests
      - integration-tests
      - check-import
    runs-on: ubuntu-22.04
    container: python:3.10
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_TWINE_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: echo ref_name=${{ github.ref_name }}
      - run: pip install -r requirements-dev.txt
      - run: python -m build
      #- run: python3 -m twine upload --repository testpypi dist/*

      - run: |-
          PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | awk '{print $3}' | sed 's/"//g');
          if [ "$PYPROJECT_VERSION" != "${{ github.ref_name }}" ]
          then
            echo "Git tag=${{ github.ref_name }} does not match pyproject.toml version=$PYPROJECT_VERSION" 1>&2
            exit 1
          fi
      - run: python3 -m twine upload dist/*
